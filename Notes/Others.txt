Authentication 1  https://www.youtube.com/watch?v=Fhfvbl_KbWo
Identity 2 https://www.youtube.com/watch?v=IjbtWPXVJGw
Authorization CLaims  https://www.youtube.com/watch?v=RBMO_hruKaI
Authorization Mores https://www.youtube.com/watch?v=n-g9O0dOV9A
----------------------

https://www.youtube.com/watch?v=YC4ewe7Rbl4
https://www.youtube.com/watch?v=YC4ewe7Rbl4
BUILDER AND REPOSITORY

Authentication in MVC
--------------------------------------------------------------------
Step 1:

Configure authentication as cookie authentication in ASP.net MVC

services.AddAuthentication("CookieAuth")
                .AddCookie("CookieAuth", config =>
                {
                    config.Cookie.Name = "RajeshAuthCookie";//Check it by F12
                    config.LoginPath = "/AppSecurity/Login";
                });

Step 2:

create ClaimsPrincipal => create Claims, ClaimsIdentity, ClaimsPrincipal in the service and return

var userClaims = new List<Claim>()
{
    new Claim(ClaimTypes.Email, "rajesh@coreapp.com"),
    new Claim(ClaimTypes.Name, "Rajesh"),
    new Claim(ClaimTypes.DateOfBirth, "11/03/1981")
};

var userAccessClaims = new List<Claim>()
{
    new Claim("PersonsReadOnly", "ReadOnly"),
    /new Claim("BooksReadOnly", "ReadOnly"),
};

var userIdentity = new ClaimsIdentity(userClaims, "User Identities");

var userAccessIdentity = new ClaimsIdentity(userAccessClaims, "User Access Identities");

var userPrinciple = new ClaimsPrincipal(new[] { userIdentity, userAccessIdentity });

Step 3:
Presense of cookie confirm authenticated user
Cookie also used to store claims to authroze user for various access
HttpContext.SignInAsync(userPrinciple);

THIS LINE of code WILL CREATE A Authentication COOKIE WITH NAME RajeshAuthCookie 
RajeshAuthCookie contains userPrinciple as encrpted value

Policy building in MVC
--------------------------------------------------------------------
config.AddPolicy("Admin", policyBuilder =>
                {
                    policyBuilder.AddRequirements(new CustomRequirementClaim("PersonsEdit"));
                    policyBuilder.AddRequirements(new CustomRequirementClaim("PersonsReadOnly"));
                });
config.AddPolicy("Uaer", policyBuilder =>
                {
                    policyBuilder.AddRequirements(new CustomRequirementClaim("PersonsReadOnly"));
                });

services.AddScoped<IAuthorizationHandler, CustomRequirementClaimHandler>();


Apply Policy in MVC, to call authoriation handler to authorize user
--------------------------------------------------------------------
[Authorize(Policy = "User")]
public async Task<IActionResult> Index()

[Authorize(Policy = "Admin")]
public async Task<IActionResult> Details(int id)
     
Handle authoriation
--------------------------------------------------------------------
Override authorization handler and handling and validate and authorize user based on user cliamns and authentication policy

CustomRequirementClaimHandler : AuthorizationHandler<CustomRequirementClaim>

protected override Task HandleRequirementAsync(AuthorizationHandlerContext context, CustomRequirementClaim requirement)=>{

var hasClaim = context.User.Claims.Any(x => x.Type == requirement.ClaimType);
if (hasClaim) { context.Succeed(requirement); }

