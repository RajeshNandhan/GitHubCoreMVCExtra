A manual procedure to CREATE and PUSH docker IMAGE into DockerHub
=========================================================================================

Step 1:


Open and RUN Docker for Windows



Step 2: 
Log into DockerHub using below command with DockerHub credential


docker login

NOTE:
DOCKER LOGIN WILL PROVIDE MESSAGE "Login Succeeded" IF YOU ALREADY LOGED IN




Step 3: 
BUILD and CREATE A Docker Image using Dockerfile file



docker build -f Dockerfile -t rajeshn7k/mainapparivutharavuthalamnetcoremvc .

"-t  = Name and optionally a tag in the 'name:tag' format"




Step 4: 
PUSH  Docker Image to DockerHub


docker push rajeshn7k/mainapparivutharavuthalamnetcoremvc
[MAKE IT PUBLIC REPOSITORY]




Step 5:  
RUN DOCKER CONTAINER



RUN IMAGE and CREATE CONTAINER [PORT-1 : PORT-2 or HOST_PORT : CONTAINER_PORT]

docker run -p 8085:4104 -d rajeshn7k/mainapparivutharavuthalamnetcoremvc

docker run -p 60000:4104 -d rajeshn7k/mainapparivutharavuthalamnetcoremvc

docker run -p 4104:4104 rajeshn7k/mainapparivutharavuthalamnetcoremvc



PORT-1 or HOST_PORT

* Docker container port to connect to, user must have to connect through this port only [access to outside world]
* It can be dynamic as user provides it in "docker run" command call.
* need not to match with exposed port like its 80 for all project dummy configuration, but can be same

PORT-2 or CONTAINER_PORT

* Application Enabled port, coming from .env[PORT] file, nothing to do with docker
* .env is configured for different environment file in project and upto user to have different port for different environment






=========================================================================================

TESTING

1.
http://localhost:8085/api/person
http://localhost:60000/api/person
http://localhost:4104/api/person



2.
docker container ls -a
Note: GET CONTAINER NAME [condescending_perlman]

to do - change the command testing based in docker file 
docker exec -it condescending_perlman /bin/sh [CONTAINER NAME] - not working
docker exec -it awesome_hermann /bin/sh

linux command 1 - ls or pwd
linux command 1 - cd /usr/share/nginx/html
linux command 1 - exit



=========================================================================================

5. Remove DOCKER Container and Delete DOCKER Image


Removing DOCKER Container

docker container ls -a
docker container stop 84c7e368a608
docker container rm 84c7e368a608
docker container prune

Note - 84c7e368a608 - container id



Removing DOCKER Image

docker ps <- list all images
docker images -a  <- list all images
docker rmi 57074eccfba9 <- remove an image
docker image rm af7cdca10d62
docker image prune - remove all unused images


=========================================================================================
Other DOCKER Commands

docker container start 14dcba819715 <- start containers

=========================================================================================

Visual Studio COmmnd

docker build -f "C:\Rajesh\Projects\NetCore\AzureDevOps\Core.API.MVC.InMemory\Core.API.AdditionalService\Dockerfile" 
--force-rm -t coreapiadditionalservice:dev 
--target base  --label "com.microsoft.created-by=visual-studio" 
--label "com.microsoft.visual-studio.project-name=Core.API.AdditionalService" "C:\Rajesh\Projects\NetCore\AzureDevOps\Core.API.MVC.InMemory" 

docker run -dt -v "C:\Users\rajes\vsdbg\vs2017u5:/remote_debugger:rw" 
-v "C:\Rajesh\Projects\NetCore\AzureDevOps\Core.API.MVC.InMemory\Core.API.AdditionalService:/app" 
-v "C:\Rajesh\Projects\NetCore\AzureDevOps\Core.API.MVC.InMemory:/src" 
-v "C:\Users\rajes\.nuget\packages\:/root/.nuget/fallbackpackages" 
-e "DOTNET_USE_POLLING_FILE_WATCHER=1" -e "ASPNETCORE_ENVIRONMENT=Development" 
-e "NUGET_PACKAGES=/root/.nuget/fallbackpackages" -e "NUGET_FALLBACK_PACKAGES=/root/.nuget/fallbackpackages" 
-P --name Core.API.AdditionalService --entrypoint tail coreapiadditionalservice:dev -f /dev/null 



 "Docker": {
      "commandName": "Docker",
      "launchBrowser": true,
      "launchUrl": "{Scheme}://{ServiceHost}:{ServicePort}/api/Person",
      "publishAllPorts": true
    }

